import openai
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import PhotoSize, Message, CallbackQuery, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
import time

openai.api_key = "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"

conversation = []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token='6890822241:AAFK1bX5imtZAdVrrvTaGPBk47MfDoFa8DQ')
dp = Dispatcher(storage=MemoryStorage())

class rass(StatesGroup):
    a = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç –º–æ–¥–µ–ª–∏
def get_model_greeting():
    response = openai.ChatCompletion.create(
    model="gpt-3.5-turbo",
    messages=[
        {"role": "system", "content": "You are a helpful assistant."},
    ] + conversation,
)

    
    return response.choices[0].message['content']



speech_context = {}

class viv:
    def __init__(self):
        self.context = ""
        self.msg = ""


gpttt_0 = InlineKeyboardButton(text='–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è', callback_data='kak')
gpttt_1 = InlineKeyboardButton(text='–ü–æ–º–æ—â—å', callback_data='pom')
gpttt = InlineKeyboardMarkup(inline_keyboard=[[gpttt_0], [gpttt_1]])


kanal_1 = InlineKeyboardButton(text='‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='https://t.me/stalker_channeI')
kanal1 = InlineKeyboardButton(text='üëÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='b')
ab = InlineKeyboardMarkup(inline_keyboard=[[kanal_1], [kanal1]])

@dp.message(Command('start'))
async def start_message(message: Message):
    speech_context[message.from_user.id] = viv()
    channel_username = '@stalker_channeI'
    user_id = message.from_user.id
    username = message.from_user.username
    user_chat_member = await bot.get_chat_member(channel_username, user_id)
    if user_chat_member.status == 'member':
        await bot.send_message(user_id, text='''–ü—Ä–∏–≤–µ—Ç! –Ø, GPT 3.5 TURBO –±–æ—Ç –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ STALKER. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?''', reply_markup=gpttt)
    else:
        await bot.send_message(user_id, text='–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!', reply_markup=ab)
    
    

@dp.message(Command('id'))
async def show_ids(message: Message):
    if message.from_user.id == 1994579994 or message.from_user.id == 1351718225:

        with open('–º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã/gpt/ids_group.txt', 'r') as f:
            ids = f.read().splitlines()
        ids_str = '\n'.join(ids)
        await message.answer(f"–°–ø–∏—Å–æ–∫ –∞–π–¥–∏ –∏–∑ —Ñ–∞–π–ª–∞:\n{ids_str}")

@dp.message(Command('info'))
async def get_info(message: types.Message):
    with open('–º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã/gpt/gpt.txt', 'r') as file:
        i = 0
        for line in file:
            chat_id = int(line.strip())
            username = await get_chat_info(chat_id)
            i += 1
            await message.answer(f"Chat ID: <code>{chat_id}</code>, Username: @{username}", parse_mode='HTML')
        await message.answer(i, "–≥—Ä—É–ø–ø")



rasss = False

@dp.message(Command('rass'))
async def handle_rass_command(message: Message, state: FSMContext):
    global rasss
    if message.from_user.id == 1994579994 or message.from_user.id == 1351718225:
       rasss = True
       await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç')
       await state.set_state(rass.a)

file_path = '–º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã/gpt/gpt.txt'

@dp.message(StateFilter(rass.a))
async def rassss(message: Message, state: FSMContext):
    global rasss
    if rasss == True:
        print('—Ä–∞—Å—Å—ã–ª–∞–µ–º')
        rasss = False
        # –ß–∏—Ç–∞–µ–º –∞–π–¥–∏ –≥—Ä—É–ø–ø –∏–∑ —Ñ–∞–π–ª–∞
        with open(file_path, 'r') as file:
            group_ids = file.read().splitlines()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
            i = 0
            j = 0
        for group_id in group_ids:
            try:
                await bot.send_message(chat_id=int(group_id), text=f'{message.text}', parse_mode='HTML')
                i += 1
                print('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω', i)
            except:
                j += 1
                print('error', j)
        await message.answer(f'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {i}\n–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {j}')
    else:
        print('false')
    


aaa = ""
aaa1 = False

@dp.message()
async def handle_message(message: Message):
    global aaa, aaa1

    if message and message.text and message.text.startswith('gpt: '):
        speech_context[message.from_user.id] = viv()
        speech_context[message.from_user.id].msg = message.text[5:]
        await handle_message(message)
    else:
        if message.text.startswith('/context'):
            speech_context[message.from_user.id] = viv()
            speech_context[message.from_user.id].context = ""
            await message.reply('–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ—á–∏ —Å–±—Ä–æ—à–µ–Ω')
            speech_context[message.from_user.id].msg = ""
    if message.text.startswith('/chat') and (message.from_user.id == 1994579994 or message.from_user.id == 1351718225):
        print('kkkkkkkkkkkkkkkkkkkkk')
        aaa = message.text[5:]
        aaa1 = True
    if message.text == '/chat' and (message.from_user.id == 1994579994 or message.from_user.id == 1351718225):
        aaa1 = False


    


@dp.callback_query()
async def po(callback: CallbackQuery):
    if callback.data == 'kak':
        await bot.send_message(callback.from_user.id, text='1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –ª—é–±—É—é –≥—Ä—É–ø–ø—É\n2. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ\n3. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º –≤ –≥—Ä—É–ø–ø–µ, –Ω–∞–ø–∏—à–∏—Ç–µ: "gpt: –º–æ–π –≤–æ–ø—Ä–æ—Å", –≥–¥–µ –Ω–∞–ø–∏—Å–∞–Ω–æ "–º–æ–π –≤–æ–ø—Ä–æ—Å", –≤–º–µ—Å—Ç–æ —ç—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å.')
    if callback.data == 'pom':
        await bot.send_message(callback.from_user.id, text='–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–º - @ibrashua.')
    if callback.data == 'b':
        await start_message(callback)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def proverka(message: Message):
    if message and message.text and message.text.startswith('gpt: '):
        speech_context[message.from_user.id] = viv()
        speech_context[message.from_user.id].msg = message.text[5:]
        await handle_message(message)
    else:
        if message.text.startswith('/context'):
            speech_context[message.from_user.id] = viv()
            speech_context[message.from_user.id].context = ""
            await message.reply('–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ—á–∏ —Å–±—Ä–æ—à–µ–Ω')
            speech_context[message.from_user.id].msg = ""
    


async def get_chat_info(chat_id):
    chat = await bot.get_chat(chat_id)
    return chat.username




async def handle_message(message: Message):
    try:
        user_input = speech_context[message.from_user.id].msg
        speech_context[message.from_user.id] = viv()
        speech_context[message.from_user.id].context += user_input + '\n'

        
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
        conversation.append({"role": "user", "content": user_input})
        await bot.send_chat_action(message.chat.id, "typing")
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
        response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=conversation,
        )
        # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
        model_response = response.choices[0].message['content']
        conversation.append({"role": "assistant", "content": model_response})
        await message.reply(model_response + "\n\n–î–ª—è —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /context", parse_mode='Markdown')
        speech_context[message.from_user.id].msg = ""
            

    except:
        speech_context[message.from_user.id] = viv()
        user_input = message.text
    
        speech_context[message.from_user.id].context += user_input + '\n'

        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
        conversation.append({"role": "user", "content": user_input})
        await bot.send_chat_action(message.chat.id, "typing")
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
        response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=conversation,
        )
        # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
        model_response = response.choices[0].message['content']
        conversation.append({"role": "assistant", "content": model_response})
        await message.reply(model_response + "\n\n–î–ª—è —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /context", parse_mode='Markdown')
        speech_context[message.from_user.id].msg = ""



@dp.message()
async def send_to_groups(message: Message):
    if message.text.startswith('rass'):
        msg = message.text[4:]
        print("–Ω–∞—á–∏–Ω–∞–µ–º")
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç
        chats = await bot.get_chat_members_count(message.chat.id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã
        i = 0
        for chat in chats:
            if chat.is_chat:
                i+=1
                print(i)
                await bot.send_message(chat.chat.id, msg)


async def main():
    while True:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(3)
            continue

if __name__ == '__main__':
    asyncio.run(main())
